package client;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;

public class ClientHandler extends Thread {

	private DataInputStream input;
	private DataOutputStream output;
	private Socket client;
	private int player;
	private ArrayList<ClientHandler> clients;
	private int number;
	private int guess;

	public ClientHandler(Socket client, int player, ArrayList<ClientHandler> clients) throws IOException {
		this.client = client;
		this.player = player;
		this.clients = clients;
		input = new DataInputStream(client.getInputStream());
		output = new DataOutputStream(client.getOutputStream());
	}

	@Override
	public void run() {

		try {
			if(player==1) {
				System.out.println("Player " + player + " connected, waiting the second");
				output.writeInt(player);	//1 Sending the player number
				player++;
				output.writeUTF("Please type a number to start to play:"); //3 Sending message
				setNumber(input.readInt());	//6 Receiving the number
				System.out.println("The number is: " + number);
				System.out.println("Waiting guess from player 2");
				
				// POSIBLE WHILE LOOP
				output.writeUTF("Player 2 attempted with " + getGuess());
				
			}else {
				System.out.println("Player "+ player + " connected, will start the game");
				output.writeInt(player);
				output.writeUTF("Please guess the number of the player 1\nType a number: ");	//3
				
				// POSIBLE WHILE LOOP
				setGuess(input.readInt());	//6 Receiving number
				getClients().get(0).setGuess(getGuess()); 	// saving the guess in player 1
				System.out.print("The number from player 2 is: " + guess);
				if(guess > getClients().get(0).getNumber()){
					output.writeUTF("Is greater than the number to guess\n Type a number: ");		// 7 Sending message
					System.out.print(". Is greater than the number");
				}

			}

			System.out.println("Waiting number from player 1");
			int guessingNumber = input.readInt();
			System.out.println("The number is: " + guessingNumber);

//				if(counter==1)
//				System.out.println("Player 1 connected, waiting the second");
//
//				Thread thread = new ClientHandler(client);
//				System.out.println("ClientHandler instanciated");
//				
//				thread.run();
//				input.readUTF();

		} catch (IOException e) {
			System.err.println("IO exception in clien handler");
		} finally {
			System.out.println("Closing server");
			try {
				client.close();
				input.close();
				output.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

	}

	public ArrayList<ClientHandler> getClients() {
		return clients;
	}

	public void setClients(ArrayList<ClientHandler> clients) {
		this.clients = clients;
	}

	public int getNumber() {
		return number;
	}

	public void setNumber(int number) {
		this.number = number;
	}

	public int getGuess() {
		return guess;
	}

	public void setGuess(int guess) {
		this.guess = guess;
	}
	
	
	

}
